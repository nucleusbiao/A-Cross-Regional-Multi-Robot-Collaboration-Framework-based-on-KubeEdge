<launch>
  <arg name="robot" default="xbot-u"/>
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="gpu" default="false"/>
  <arg name="organize_cloud" default="false"/>

  <!-- Start Gazebo with a blank world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!--arg name="world_name" value="$(find robot_sim_demo)/worlds/ROS-Academy.world"/ -->
    <arg name="world_name" value="$(find robot_sim_demo)/worlds/ROS-Academy2.world"/>
    <!--arg name="world_name" value="$(find robot_sim_demo)/worlds/sai_di.world"/-->
    <!--arg name="world_name" value="$(find turtlebot_gazebo)/worlds/playground.world"/-->
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Oh, you wanted a robot? -->
  <!-- include file="$(find robot_sim_demo)/launch/include/$(arg robot).launch.xml"/ -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find autolabor_description)/urdf/autolabor_pro1.xacro'" /> 

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model autolabor_pro1 -param robot_description -x 0.0 -y 0.0 -z 0.0"/>
  
  <!-- send fake joint values -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" output="screen" />

  <!-- Combine joint values -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen"/>
  
 
  <node pkg="mapper_sub" name="sub" type="sub.py" output="screen"/>
  <node pkg="mapper_sub" name="pub" type="pub.py" output="screen"/>
  <!-- Run the map server -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)"/>
 
  <!-- Run the move base -->
  <include file="$(find robot_navigation)/launch/pro_move_bash.launch" />
  
  <!--- Run AMCL <include file="$(find amcl)/examples/amcl_diff.launch" />-->
  <include file="$(find amcl)/examples/amcl_diff.launch">
     <remap from="scan" to="scan"/>
  </include>
</launch>


